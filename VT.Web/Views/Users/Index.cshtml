@using Kendo.Mvc.UI
@using VT.Common
@using VT.Web.Models

@{
    ViewBag.Title = "Employees";
    Layout = "~/Views/Shared/LoggedInLayout.cshtml";
    var customIdentity = (CustomIdentity)User.Identity;
}

@section PageLevelStyles
{
    <style>
        .redOption {
            color: red;
            font-style: italic;
        }
    </style>
    <link href="~/Content/plugins/switchery/switchery.css" rel="stylesheet" />
}

@section PageLevelScripts
{
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/iCheck")

    <script src="~/Scripts/plugins/switchery/switchery.js"></script>
    <script src="@Url.Content("~/Scripts/plugins/multiselect-master/js/multiselect.min.js")"></script>
    <script src="@Url.Content("~/Scripts/app/user.js")"></script>

    <script type="text/javascript">
        var userId = '@customIdentity.UserId';
        var orgId = '@ViewData["OrgId"].ToString()';
        $('#su_multiselect_from_1').multiselect();
        $('#su_multiselect_to_1').multiselect();

        $('#su_multiselect_from_2').multiselect();
        $('#su_multiselect_to_2').multiselect();

        if (orgId.length > 0) {
            // auto open create customer after company/organization creation
            $("#btnAddUser").trigger("click");
            $("#CompanyId").val(orgId).change();
            //$("#IsAdmin").addClass('active');
            $("#IsAdmin").trigger("click");
        }

        function renderCheckBox(item) {
            var id = item.Id.toString();
            if (id == userId) return "";
            return [
                "<input type='checkbox' value='" + item.Id + "' class='i-checks'></input>"
            ].join('');
        }

        function getRole(item) {
            var role = "";
            if (item.CompanyId === null) {
                role = "Super Admin";
            }
            else if (item.CompanyId != null && item.IsAdmin == "Yes") {
                role = "Administrator";
            }
            else {
                role = "Field Worker";
            }
            return "<span class='label label-" + (role == "Field Worker" ? "warning" : "primary") + "'>" + role + "</span>";
        }

        function getCompanyName(item) {
            return (item.IsCompanyDeleted == true) ? "<i style=color:red;>" + item.CompanyName + "</i>" : item.CompanyName;
        }

        function getActiveInfo(item) {
            return "<span class='label label-" + item.IsActiveCss + "'>" + item.IsActiveText + "</span>";
        }
        function getEmployeeName(item) {
            return (item.IsDeleted == true) ? "<i style=color:red;>" + item.Name + "</i>" : item.Name;
        }

        function getActionsInfo(item) {
            return [
                "<a class='edit-user " + (item.CompanyId === null ? "hide" : "") + "' data-id='" + item.Id + "' href='#' title='Edit'><i class='fa fa-pencil'></i></a> &nbsp;" +
                "<a class='view-user' data-id='" + item.Id + "' href='#divUserDetails' title='View'><i class='fa fa-eye'></i></a> &nbsp;" +
                "<a class='password-reset' data-id='" + item.Id + "' href='#' title='Password Reset'><i class='fa fa-key'></i></a> &nbsp;" +
                "<a class='customers-permission " + (item.IsAdmin === "Yes" ? "hide" : "") + "'  data-id='" + item.Id + "' href='#' title='Access to Customers'><i class='fa fa-handshake-o'></i></a> "
            ].join('');
        }
        // for super administrator.
        function getToggleSuperAdministrator(item) {
            if (item.CompanyId == null) {
                return "";
            }
            else if (item.IsActive) {
                return "<a class='btn-icon-only btn-default emp-deactivate' data-id='" + item.Id + "' href='#' data-toggle='tooltip' title='Inactive'><i class='fa fa-toggle-on fa-3x' aria-hidden='true'></i></a> &nbsp;";
            }
            else {
                return "<a class='btn-icon-only btn-default emp-activate' data-id='" + item.Id + "' href='#' data-toggle='tooltip' title='Active'><i class='fa fa-toggle-off fa-3x' aria-hidden='true'></i></a> &nbsp;";
            }
        }

        function onRead(o) {
            return {
                additionalInfo: $("#gridItemStatus").val()
            };
        }
    </script>

}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>EMPLOYEES</h2>
    </div>
    <div class="col-lg-2">
    </div>
</div>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>ALL EMPLOYEES</h5>
                    <div class="ibox-tools">
                        <a class="collapse-link">
                            <i class="fa fa-chevron-up"></i>
                        </a>
                    </div>
                </div>
                <div class="ibox-content">
                    <div class="">
                        <a data-toggle="modal" href="#modal-add-user-form" id="btnAddUser" class="btn btn-info btn-rounded btn-outline "><i class="fa fa-plus"></i> &nbsp; Add Employee</a>
                        <a href="#modal-form" id="btnDeleteUser" class="btn btn-danger btn-rounded btn-outline"><i class="fa fa-trash"></i> &nbsp; Deactivate Employee(s)</a>

                        @if (ApplicationSettings.EnableUserImport)
                        {
                            @*<button type='button' onclick="location.href='@Url.Action("SyncEmployeeResults","Quickbooks")';return false;" 
                                    class='btn btn-primary btn-sm'>
                                Sync Employees
                            </button>*@
                            <a data-toggle="modal" class="btn btn-primary btn-rounded btn-outline pull-right">
                                <i class="fa fa-file-excel-o"></i> &nbsp; Import Employees
                            </a>                         
                        }
                    </div>

                    @Html.Partial("GridHeader", "UsersListGrid")

                    @(Html.Kendo().Grid<UsersListViewModel>()
                              .Name("UsersListGrid")
                              .Reorderable(x => x.Columns(true))
                              .Pageable(page => page
                                  .Info(true)
                                  .ButtonCount(5)
                                  .Messages(message => message
                                      .Empty("No data")
                                      .Next("Next")
                                      .Previous("Previous")
                                      .First("First")
                                      .Last("Last")
                                  )
                              )
                              .Filterable()
                              .Sortable()
                              .Columns(columns =>
                              {
                                  columns.Bound(x => x.Id).Title("").ClientTemplate("#= renderCheckBox.apply(this,arguments) #").Width(45).Filterable(false);
                                  columns.Bound(x => x.CompanyId).Visible(false);
                                  //columns.Bound(x => x.CompanyName).Visible(User.IsInRole(UserRoles.SuperAdmin.ToString())).Title("Organization").Filterable(ftb => ftb.Multi(true));
                                  columns.Template(@<text></text>).Visible(User.IsInRole(UserRoles.SuperAdmin.ToString())).Title("Company Name").ClientTemplate("#= getCompanyName.apply(this, arguments) #");
                              columns.Template(@<text></text>).Title("Name").ClientTemplate("#= getEmployeeName.apply(this, arguments) #");
                              columns.Bound(x => x.Email).Title("Email");
                              columns.Bound(x => x.IsActive).Visible(false);
                              columns.Bound(x => x.IsActive).Title("Customers").Visible(false);
                              columns.Template(@<text></text>).Title("Role").ClientTemplate("#= getRole.apply(this, arguments) #");
                              columns.Template(@<text></text>).Title("<b>Active? </b>")
                                 .ClientTemplate("#= getToggleSuperAdministrator.apply(this, arguments) #");
                                @*columns.Template(@<text></text>)
                                    .Title("Is Active")
                                    .ClientTemplate("#= getActiveInfo.apply(this, arguments) #");*@
                    columns.Template(@<text></text>).Title("Actions").ClientTemplate("#= getActionsInfo.apply(this, arguments) #");
                              })
                              .ToolBar(toolbar =>
                              {
                                  toolbar.Template(@<text>
                        <div class="toolbar">
                            <a href="javascript:void(0)" onclick="return VT.Util.ClearAllKendoGridFilter();" class="btn btn-primary btn-sm btn-rounded">Clear Filters</a>
                        </div>
                                </text>);
                              })
                              .Events(events => events.DataBound("VT.Util.ConnectKendoGrids"))
                              .NoRecords("No data found.")
                              .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .PageSize(10)
                                  .Model(model => model.Id(p => p.Id))
                                  .Read(read => read.Action("UserList", "Users").Data("onRead")))
                    )

                    @Html.Partial("ConfirmModal", new ModalViewModal
               {
                   Id = "delete-user-confirm-modal",
                   IsAlertModel = false,
                   Title = "Deactivate Employee(s)",
                   Message = "Are you sure you want to deactivate the selected Employee(s)?"
               })
                </div>
            </div>
        </div>
    </div>
    <div class="row" id="divUserDetails">
        <!--Load dynamic content through ajax-->
    </div>
</div>

<div id="divPasswordReset">
    <!--Load dynamic content through ajax-->
</div>

<div id="divAttachments">
    <!--Load dynamic content through ajax-->
</div>

@Html.Partial("AddUser", new SaveUserModel
{
    CompanyId = customIdentity.CompanyId
})

@Html.Partial("ResetPassword", new PasswordResetModel
{
    //set UserId through ajax
})

@Html.Partial("CustomerAccess", new ViewCustomerAccessModel
{
    //set UserId through ajax
})



@Html.Partial("ConfirmModal", new ModalViewModal
{
    Id = "modal-activate-emp-form",
    IsAlertModel = false,
    Title = "Activate Employee",
    Message = "Are you sure you want to activate this employee?",
    HiddenElementId = "hdnActivateEmpId",
    BtnId = "btnActivateEmp"
})

@Html.Partial("ConfirmModal", new ModalViewModal
{
    Id = "modal-deactivate-emp-form",
    IsAlertModel = false,
    Title = "Deactivate Employee",
    Message = "Are you sure you want to deactivate this employee?",
    HiddenElementId = "hdnDeactiveEmpId",
    BtnId = "btnDeactivateEmp"
})
@Html.Partial("ImportUsers", new ImportUsersModel
{
    OrganizationId = customIdentity.CompanyId
})

